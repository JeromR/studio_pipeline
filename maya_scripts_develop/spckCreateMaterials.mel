// spckMakeMaterials_v0.3.mel
//
// By Daniel Harkness
//
// Setup scene according to car kit guidelines

source "spinCreateLinearGammaUtility.mel";

//
//
// Add all materials
//
//

global proc spckCreateMaterials() {

	spckCreateMatteMaterials();
	spckCreatePlasticMaterials();
	spckCreateLightMaterials();
	spckCreateMetalMaterials();
	spckCreateChromeMaterials();
	spckCreateWheelMaterials();
	spckCreateBrakeMaterials();
	spckCreateWindowMaterials();
	spckCreatePaintMaterials();
	spckCreateTechMaterials();
	
	print "spckCreateMaterials Complete.\n";
}


//
//
// Add essential mattes materials
//
// - created to roy specs

global proc spckCreateMatteMaterials() {

	string $matteBlack 		= "SS_Matte_Black";
	string $matteWhite 		= "SS_Matte_White";
	string $matteRed 		= "SS_Matte_Red";
	string $matteGreen 		= "SS_Matte_Green";
	string $matteBlue 		= "SS_Matte_Blue";
	
	string $matteBin		= "Mattes";
	string $matteSolidBin   = "Mattes_Solid";
	
	// Check if matte shader exists - if not create it - add to mattes bin
	
	if (!objExists($matteBlack)){
		shadingNode -n $matteBlack -asShader surfaceShader;
		sets -renderable true -noSurfaceShader true -empty -name ($matteBlack+"SG");
		connectAttr -f ($matteBlack+".outColor") ($matteBlack+"SG.surfaceShader");
		setAttr ($matteBlack+".outColor") -type double3 0 0 0 ;
	}
	select -r $matteBlack;
	binMembership -add $matteBin;
	binMembership -add $matteSolidBin;
	
	// Check if matte shader exists - if not create it - add to mattes bin

	
	if (!objExists($matteWhite)){
		shadingNode -n $matteWhite -asShader surfaceShader;
		sets -renderable true -noSurfaceShader true -empty -name ($matteWhite+"SG");
		connectAttr -f ($matteWhite+".outColor") ($matteWhite+"SG.surfaceShader");
		setAttr ($matteWhite+".outColor") -type double3 1 1 1 ;
	}
	select -r $matteWhite;
	binMembership -add $matteBin;
	binMembership -add $matteSolidBin;

	// Check if matte shader exists - if not create it - add to mattes bin
	
	
	if (!objExists($matteRed)){
		shadingNode -n $matteRed -asShader surfaceShader;
		sets -renderable true -noSurfaceShader true -empty -name ($matteRed+"SG");
		connectAttr -f ($matteRed+".outColor") ($matteRed+"SG.surfaceShader");
		setAttr ($matteRed+".outColor") -type double3 1 0 0 ;
	}
	select -r $matteRed;
	binMembership -add $matteBin;
	binMembership -add $matteSolidBin;

	// Check if matte shader exists - if not create it - add to mattes bin
	
	if (!objExists($matteGreen)){
		shadingNode -n $matteGreen -asShader surfaceShader;
		sets -renderable true -noSurfaceShader true -empty -name ($matteGreen+"SG");
		connectAttr -f ($matteGreen+".outColor") ($matteGreen+"SG.surfaceShader");
		setAttr ($matteGreen+".outColor") -type double3 0 1 0 ;
	}
	select -r $matteGreen;
	binMembership -add $matteBin;

	// Check if matte shader exists - if not create it - add to mattes bin
	
	if (!objExists($matteBlue)){
		shadingNode -n $matteBlue -asShader surfaceShader;
		sets -renderable true -noSurfaceShader true -empty -name ($matteBlue+"SG");
		connectAttr -f ($matteBlue+".outColor") ($matteBlue+"SG.surfaceShader");
		setAttr ($matteBlue+".outColor") -type double3 0 0 1 ;
	}	binMembership -add $matteBin;
	binMembership -add $matteSolidBin;

	select -r $matteBlue;
	binMembership -add $matteBin;
	binMembership -add $matteSolidBin;
	
	print "spckCreateMatteMaterials Complete.\n";
}


//
//
// Add essential plastic materials
//
// - created to roy's specs

global proc spckCreatePlasticMaterials() {

	string $plasticBlackMatte 		= "VR_Plastic_Black_Matte";
	string $plasticBlackGloss 		= "VR_Plastic_Black_Gloss";
	string $plasticBlackSemiGloss	= "VR_Plastic_Black_SemiGloss";
	string $plasticBlackLowSheen 	= "VR_Plastic_Black_LowSheen";
	string $plasticBlackSatin 		= "VR_Plastic_Black_Satin";
	
	string $plasticsBin				= "Car_Plastics";
	string $partsBin				= "Car_Parts";
	
	string $materialList[] = { $plasticBlackMatte,
							$plasticBlackGloss,
							$plasticBlackSemiGloss,
							$plasticBlackLowSheen,
							$plasticBlackSatin
							};

	// Check if brake shader exists - if not create it - add to window bin
	for ($material in $materialList) {
		if (!objExists($material)){
			shadingNode -n $material -asShader VRayMtl;
			sets -renderable true -noSurfaceShader true -empty -name ($material+"SG");
			connectAttr -f ($material+".outColor") ($material+"SG.surfaceShader");
		}
		select -r $material;
		binMembership -add $plasticsBin;
		binMembership -add $partsBin;
		
		// Set Common Atrrivbutes
		setAttr ($material+".color") -type double3 0 0 0 ;
		setAttr ($material+".reflectionColor") -type double3 1 1 1 ;
		setAttr ($material+".brdfType") 1;
		setAttr ($material+".useFresnel") 1;
		setAttr ($material+".reflectionColorAmount") 0.4;
		setAttr ($material+".refractionIOR") 1.584;
		
		// Set Multimatte ID
		
		vrayAddAttr $material vrayColorId;
		vrayAddAttr $material vrayMaterialId;
		
		setAttr ($material+".vrayMaterialId") 7;

	}
	
	// Setup Amounts of reflection glossiness for plastics
	setAttr ($plasticBlackMatte+".reflectionGlossiness") 0.55;
	setAttr ($plasticBlackGloss+".reflectionGlossiness") 0.95;
	setAttr ($plasticBlackSemiGloss+".reflectionGlossiness") 0.8;
	setAttr ($plasticBlackLowSheen+".reflectionGlossiness") 0.6;
	setAttr ($plasticBlackSatin+".reflectionGlossiness") 0.7;
	
	// Setup Roughness for plastics
	setAttr ($plasticBlackMatte+".roughnessAmount") 0.2;
	setAttr ($plasticBlackGloss+".roughnessAmount") 0;
	setAttr ($plasticBlackSemiGloss+".roughnessAmount") 0.2;
	setAttr ($plasticBlackLowSheen+".roughnessAmount") 0.6;
	setAttr ($plasticBlackSatin+".roughnessAmount") 0.4;

	print "spckCreatePlasticMaterials Complete.\n";

}

//
//
// Add head and tailight materials
//
// - made to Roy's specifications

global proc spckCreateLightMaterials() {

	spckCreateClearGlassMaterials();

	string $plasticClearThin		= "VR_Plastic_Clear_Thin";
	string $plasticClearThick		= "VR_Plastic_Clear_Thick";
	string $plasticClearFrostThick	= "VR_Plastic_Clear_Frost_Thick";
	string $plasticClearFrostThin	= "VR_Plastic_Clear_Frost_Thin";
	string $plasticRedThin			= "VR_Plastic_Red_Thin";
	string $plasticRedThick			= "VR_Plastic_Red_Thick";
	string $plasticOrangeThin		= "VR_Plastic_Orange_Thin";
	string $plasticOrangeThick		= "VR_Plastic_Orange_Thick";

	string $lightsBin				= "Car_Lights";
	
	string $materialList[] = { $plasticClearThin,
							$plasticClearThick,
							$plasticClearFrostThick,
							$plasticClearFrostThin,
							$plasticRedThin,
							$plasticRedThick,
							$plasticOrangeThin,
							$plasticOrangeThick
							};
						
	// Check if shader exists - if not create it - add to bin
	for ($material in $materialList) {
		if (!objExists($material)){
			shadingNode -n $material -asShader VRayMtlWrapper;
			sets -renderable true -noSurfaceShader true -empty -name ($material+"SG");
			connectAttr -f ($material+".outColor") ($material+"SG.surfaceShader");
			
			shadingNode -n ($material+"_base") -asShader VRayMtl;
			connectAttr -f ($material+"_base.outColor") ($material+".baseMaterial");
		}
		
		//Setup common settings
		setAttr ($material+".generateGI") 0;
		setAttr ($material+"_base.swatchAutoUpdate") 0;
		setAttr ($material+"_base.brdfType") 1;
		setAttr ($material+"_base.reflectionColor") -type double3 1 1 1;
		setAttr ($material+"_base.reflectionColorAmount") 0.9;
		setAttr ($material+"_base.refractionColor") -type double3 1 1 1;
		setAttr ($material+"_base.refractionColorAmount") 1;
		setAttr ($material+"_base.useFresnel") 1;
		setAttr ($material+"_base.fresnelIOR") 1.584;
		setAttr ($material+"_base.refractionsMaxDepth") 15;
		setAttr ($material+"_base.reflectionsMaxDepth") 15;
		
		//Fog Ramp
		
		shadingNode -n ($material+"_base_fogRamp") -asTexture ramp;
		spinCreateLinearGammaUtility ( ($material+"_base_fogRamp_gamma") );
		
		removeMultiInstance -break true ($material+"_base_fogRamp.colorEntryList[1]");
		removeMultiInstance -break true ($material+"_base_fogRamp.colorEntryList[2]");
		
		connectAttr -f ($material+"_base_fogRamp.outColor") ($material+"_base_fogRamp_gamma.value");
		connectAttr -f ($material+"_base_fogRamp_gamma.outValue") ($material+"_base.fogColor");


		select -r $material;
		binMembership -add $lightsBin;
		
		select -r ($material+"_base");
		binMembership -rm $lightsBin;

	}
	
	// Setup Colour and refraction
	
	// Clear Thin
	setAttr ($plasticClearThin+"_base.lockFresnelIORToRefractionIOR") 0;
	setAttr ($plasticClearThin+"_base.fresnelIOR") 1.584;
	setAttr ($plasticClearThin+"_base.refractionIOR") 1.005;
	setAttr ($plasticClearThin+"_base_fogRamp.colorEntryList[0].color") -type double3 1 1 1;


	// Clear Thick
	setAttr ($plasticClearThick+"_base.lockFresnelIORToRefractionIOR") 1;
	setAttr ($plasticClearThick+"_base.fresnelIOR") 1.584;
	setAttr ($plasticClearThick+"_base.refractionIOR") 1.584;
	setAttr ($plasticClearThick+"_base_fogRamp.colorEntryList[0].color") -type double3 1 1 1;

	// Clear Frost Thin
	setAttr ($plasticClearFrostThin+"_base.lockFresnelIORToRefractionIOR") 0;
	setAttr ($plasticClearFrostThin+"_base.fresnelIOR") 1.584;
	setAttr ($plasticClearFrostThin+"_base.refractionIOR") 1.005;
	setAttr ($plasticClearFrostThin+"_base_fogRamp.colorEntryList[0].color") -type double3 1 1 1;
	setAttr ($plasticClearFrostThin+"_base.refractionGlossiness") 0.9;


	// Clear Frost Thick
	setAttr ($plasticClearFrostThick+"_base.lockFresnelIORToRefractionIOR") 1;
	setAttr ($plasticClearFrostThick+"_base.fresnelIOR") 1.584;
	setAttr ($plasticClearFrostThick+"_base.refractionIOR") 1.584;
	setAttr ($plasticClearFrostThick+"_base_fogRamp.colorEntryList[0].color") -type double3 1 1 1;
	setAttr ($plasticClearFrostThick+"_base.refractionGlossiness") 0.9;

	// Red Thin
	setAttr ($plasticRedThin+"_base.reflectionColorAmount") 0.45;
	setAttr ($plasticRedThin+"_base.reflectionGlossiness") 0.7;
	
	setAttr ($plasticRedThin+"_base.lockFresnelIORToRefractionIOR") 0;
	setAttr ($plasticRedThin+"_base.fresnelIOR") 1.584;
	setAttr ($plasticRedThin+"_base.refractionIOR") 1.005;
	setAttr ($plasticRedThin+"_base_fogRamp.colorEntryList[0].color") -type double3 0.9 0 0;
	setAttr ($plasticRedThin+"_base.fogMult") 1.5;
	setAttr ($plasticRedThin+"_base.fogBias") 0;

	// Red Thick
	setAttr ($plasticRedThick+"_base.reflectionColorAmount") 0.45;
	setAttr ($plasticRedThick+"_base.reflectionGlossiness") 0.7;

	setAttr ($plasticRedThick+"_base.lockFresnelIORToRefractionIOR") 1;
	setAttr ($plasticRedThick+"_base.fresnelIOR") 1.584;
	setAttr ($plasticRedThick+"_base.refractionIOR") 1.584;
	setAttr ($plasticRedThick+"_base_fogRamp.colorEntryList[0].color") -type double3 0.9 0 0;
	setAttr ($plasticRedThick+"_base.fogMult") 1.5;
	setAttr ($plasticRedThick+"_base.fogBias") 0;

	// Orange Thin
	setAttr ($plasticOrangeThin+"_base.lockFresnelIORToRefractionIOR") 0;
	setAttr ($plasticOrangeThin+"_base.fresnelIOR") 1.584;
	setAttr ($plasticOrangeThin+"_base.refractionIOR") 1.005;
	setAttr ($plasticOrangeThin+"_base_fogRamp.colorEntryList[0].color") -type double3 0.85 0.43 0.043;
	setAttr ($plasticOrangeThin+"_base.fogMult") 2.5;
	setAttr ($plasticOrangeThin+"_base.fogBias") 3.0;
	

	// Orange Thick
	setAttr ($plasticOrangeThick+"_base.lockFresnelIORToRefractionIOR") 1;
	setAttr ($plasticOrangeThick+"_base.fresnelIOR") 1.584;
	setAttr ($plasticOrangeThick+"_base.refractionIOR") 1.584;
	setAttr ($plasticOrangeThick+"_base_fogRamp.colorEntryList[0].color") -type double3 0.85 0.43 0.043;
	setAttr ($plasticOrangeThick+"_base.fogMult") 2.5;
	setAttr ($plasticOrangeThick+"_base.fogBias") 2.0;


	print "spckCreateLightMaterials Complete.\n";
}


//
//
// Add metal materials
//
// - Partially made to Roy's specs - needs anisotropy

global proc spckCreateMetalMaterials() {

	string $metalUnderCarriage	= "VR_Metal_UnderCarriage";
	string $metalBlackGloss		= "VR_Metal_Black_Gloss";
	string $metalBlackMatte		= "VR_Metal_Black_Matte";
	string $metalSteelGloss		= "VR_Metal_Steel_Gloss";
	string $metalSteelMatte		= "VR_Metal_Steel_Matte";
	
	string $metalBin		= "Car_Metals";
	string $partsBin		= "Car_Parts";

	string $materialList[] = { $metalUnderCarriage,
							$metalBlackGloss,
							$metalBlackMatte,
							$metalSteelGloss,
							$metalSteelMatte
							};
							
	// Check if brake shader exists - if not create it - add to window bin
	for ($material in $materialList) {
		if (!objExists($material)){
			shadingNode -n $material -asShader VRayMtl;
			sets -renderable true -noSurfaceShader true -empty -name ($material+"SG");
			connectAttr -f ($material+".outColor") ($material+"SG.surfaceShader");
		}
		select -r $material;
		binMembership -add $metalBin;
		
		// Add everything except undercarriage to the parts bin
		if ($material != $metalUnderCarriage){
			binMembership -add $partsBin;
		}
		
		//Colour Ramp
		
		shadingNode -n ($material+"_colourRamp") -asTexture ramp;
		spinCreateLinearGammaUtility ( ($material+"_colourRamp_gamma") );
		
		removeMultiInstance -break true ($material+"_colourRamp.colorEntryList[1]");
		removeMultiInstance -break true ($material+"_colourRamp.colorEntryList[2]");
		
		connectAttr -f ($material+"_colourRamp.outColor") ($material+"_colourRamp_gamma.value");
		connectAttr -f ($material+"_colourRamp_gamma.outValue") ($material+".color");
		
		// Set Multimatte ID
		
		vrayAddAttr $material vrayColorId;
		vrayAddAttr $material vrayMaterialId;
		
		setAttr ($material+".vrayMaterialId") 8;

	}
	
	// Setup Undercarriage
	
	setAttr ($metalUnderCarriage+"_colourRamp.colorEntryList[0].color") -type double3 0.125 0.125 0.125 ;
	setAttr ($metalUnderCarriage+".roughnessAmount") 0.5 ;
	
	// Setup Black
	
	setAttr ($metalBlackGloss+"_colourRamp.colorEntryList[0].color") -type double3 0.1 0.1 0.1 ;
	setAttr ($metalBlackMatte+"_colourRamp.colorEntryList[0].color") -type double3 0.1 0.1 0.1 ;

	// Setup Steel
	
	setAttr ($metalSteelGloss+"_colourRamp.colorEntryList[0].color") -type double3 0.5 0.5 0.5 ;
	setAttr ($metalSteelMatte+"_colourRamp.colorEntryList[0].color") -type double3 0.5 0.5 0.5 ;
	
	// Setup Glossies
	
	// Setup Mattes
	
	print "spckCreateMetalMaterials Complete.\n";
}

//
//
// Add chrome materials
//
// - created to roy specs

global proc spckCreateChromeMaterials() {

	string $chrome			= "VR_Chrome";
	string $chromeLowSheen	= "VR_Chrome_LowSheen";
	string $chromeSatin		= "VR_Chrome_Satin";
	string $chromeBlue		= "VR_Chrome_Blue";
	string $chromeLights	= "VR_Chrome_Lights";

	string $chromeBin		= "Car_Chrome";
	string $lightsBin		= "Car_Lights";
	string $partsBin		= "car_Parts";

	string $materialList[] = { $chrome,
							$chromeLowSheen,
							$chromeSatin,
							$chromeBlue,
							$chromeLights
							};
							
	// Check if  shader exists - if not create it - add to window bin
	for ($material in $materialList) {
		if (!objExists($material)){
			shadingNode -n $material -asShader VRayMtl;
			sets -renderable true -noSurfaceShader true -empty -name ($material+"SG");
			connectAttr -f ($material+".outColor") ($material+"SG.surfaceShader");
		}
		select -r $material;
		binMembership -add $chromeBin;
	
		setAttr ($material+".color") -type double3 0.25 0.25 0.25 ;
		setAttr ($material+".reflectionColor") -type double3 1 1 1;
		setAttr ($material+".reflectionColorAmount") 0.85;
		setAttr ($material+".brdfType") 0;
		setAttr ($material+".useFresnel") 1;
		setAttr ($material+".refractionIOR") 20;
		
		// Set Multimatte ID
		
		vrayAddAttr $material vrayColorId;
		vrayAddAttr $material vrayMaterialId;
		
		setAttr ($material+".vrayMaterialId") 9;

	}

	// Setup Amounts of reflection glossiness for plastics
	setAttr ($chrome+".reflectionGlossiness") 1;
	setAttr ($chromeLowSheen+".reflectionGlossiness") 0.5;
	setAttr ($chromeSatin+".reflectionGlossiness") 0.7;
	setAttr ($chromeBlue+".reflectionGlossiness") 0.6;
	setAttr ($chromeLights+".reflectionGlossiness") 0.7;

	// Add specific chromes to bins
	select -r $chromeLights;
	binMembership -add $lightsBin;
	
	// Setup Blue Chrome
	setAttr ($chromeBlue+".color") -type double3 0.125 0.125 0.25;
	setAttr ($chromeBlue+".reflectionColor") -type double3 0.9 0.9 1;
	
	// Setup Bright Chrome
	setAttr ($chromeLights+".hilightGlossinessLock") 0;
	setAttr ($chromeLights+".hilightGlossiness") 0.5;
	setAttr ($chromeLights+".reflectionGlossiness") 1;
	
	print "spckCreateChromeMaterials Complete.\n";
}

//
//
// Add Wheel materials
//
// - partially created

global proc spckCreateWheelMaterials() {

	string $alloyMatte		= "VR_Alloy_Matte";
	string $alloyGloss		= "VR_Alloy_Gloss";
	string $tyreMatte		= "VR_Tyre_Matte";
	string $tyreGloss		= "VR_Tyre_Gloss";

	string $wheelBin		= "Car_Wheels";
	
	string $materialList[] = { $alloyMatte,
							$alloyGloss,
							$tyreMatte,
							$tyreGloss
							};
							
	string $alloyList[] = { $alloyMatte,
							$alloyGloss
							};
							
	string $tyreList[] = { $tyreMatte,
							$tyreGloss
							};
							
	// Check if brake shader exists - if not create it - add to window bin
	for ($material in $materialList) {
		if (!objExists($material)){
			shadingNode -n $material -asShader VRayMtl;
			sets -renderable true -noSurfaceShader true -empty -name ($material+"SG");
			connectAttr -f ($material+".outColor") ($material+"SG.surfaceShader");
		}
		select -r $material;
		binMembership -add $wheelBin;
	}
	
	// Setup tyres
	
	for ($material in $tyreList){
		setAttr ($material+".color") -type double3 0.1 0.1 0.1 ;
	}
	
	// Setup alloys
	
	for ($material in $alloyList){
	
		//Color Ramp
		shadingNode -n ($material+"_colorRamp") -asTexture ramp;
		shadingNode -n ($material+"_ramps_place2dTexture") -asUtility place2dTexture;
		connectAttr ($material+"_ramps_place2dTexture.outUV") ($material+"_colorRamp.uv");
		connectAttr ($material+"_ramps_place2dTexture.outUvFilterSize") ($material+"_colorRamp.uvFilterSize");
		connectAttr -f ($material+"_colorRamp.outColor") ($material+".color");

		setAttr ($material+"_colorRamp.type") 1;
		removeMultiInstance -break true ($material+"_colorRamp.colorEntryList[2]");
		setAttr ($material+"_colorRamp.colorEntryList[1].position") 0.975;
		setAttr ($material+"_colorRamp.colorEntryList[0].position") 0.85;
		setAttr ($material+"_colorRamp.colorEntryList[1].color") -type double3 0.3 0.3 0.3;
		setAttr ($material+"_colorRamp.colorEntryList[0].color") -type double3 0.1 0.1 0.1;

	
		//Refl Ramp
		shadingNode -n ($material+"_reflRamp") -asTexture ramp;
		connectAttr ($material+"_ramps_place2dTexture.outUV") ($material+"_reflRamp.uv");
		connectAttr ($material+"_ramps_place2dTexture.outUvFilterSize") ($material+"_reflRamp.uvFilterSize");
		connectAttr -f ($material+"_reflRamp.outColor") ($material+".reflectionColor");

		setAttr ($material+"_reflRamp.type") 1;
		removeMultiInstance -break true ($material+"_reflRamp.colorEntryList[2]");
		setAttr ($material+"_reflRamp.colorEntryList[1].position") 0.975;
		setAttr ($material+"_reflRamp.colorEntryList[0].position") 0.85;
		setAttr ($material+"_reflRamp.colorEntryList[1].color") -type double3 1 1 1;
		setAttr ($material+"_reflRamp.colorEntryList[0].color") -type double3 0 0 0;
		
		//Set Last Attributes
		setAttr ($material+".reflectionColorAmount") 0.85;
		setAttr ($material+".refractionIOR") 21;
		setAttr ($material+".brdfType") 0;
		setAttr ($material+".useFresnel") 1;
		
		// Set Multimatte ID
		
		vrayAddAttr $material vrayColorId;
		vrayAddAttr $material vrayMaterialId;
		
		setAttr ($material+".vrayMaterialId") 12;
	}
	print "spckCreateWheelMaterials Complete.\n";
}

//
//
// Add brake materials
//
// - created to roy specs

global proc spckCreateBrakeMaterials() {

	string $metalDisc			= "VR_Metal_Brake_Disc";
	string $metalCalliperSteel	= "VR_Metal_Brake_Calliper_Steel";

	string $brakeBin			= "Car_Brakes";
	string $metalBin			= "Car_Metals";
	
	string $materialList[] = { $metalDisc,
							$metalCalliperSteel
							};
	
	// Check if brake shader exists - if not create it - add to window bin
	for ($material in $materialList) {
		if (!objExists($material)){
			shadingNode -n $material -asShader VRayMtl;
			sets -renderable true -noSurfaceShader true -empty -name ($material+"SG");
			connectAttr -f ($material+".outColor") ($material+"SG.surfaceShader");
		}
		select -r $material;
		binMembership -add $brakeBin;
		binMembership -add $metalBin;
		
		// Set Multimatte ID
		
		vrayAddAttr $material vrayColorId;
		vrayAddAttr $material vrayMaterialId;
		
		setAttr ($material+".vrayMaterialId") 12;

	}
	
	
	// Setup Calliper Steel ==================================================================
	
	
	// Setup Disc ==================================================================
	
	// Setup ramp conections
	
	spinCreateLinearGammaUtility ( ($metalDisc+"_colorRamp_gamma") );
	spinCreateLinearGammaUtility ( ($metalDisc+"_reflRamp_gamma") );
	spinCreateLinearGammaUtility ( ($metalDisc+"_bumpRamp_gamma") );
	
	shadingNode -n ($metalDisc+"_colorRamp") -asTexture ramp;
	shadingNode -n ($metalDisc+"_reflRamp") -asTexture ramp;
	shadingNode -n ($metalDisc+"_anisRamp") -asTexture ramp;
	shadingNode -n ($metalDisc+"_bumpRamp") -asTexture ramp;

	shadingNode -n ($metalDisc+"_ramps_place2dTexture") -asUtility place2dTexture;
	
	connectAttr ($metalDisc+"_ramps_place2dTexture.outUV") ($metalDisc+"_colorRamp.uv");
	connectAttr ($metalDisc+"_ramps_place2dTexture.outUvFilterSize") ($metalDisc+"_colorRamp.uvFilterSize");
	connectAttr -f ($metalDisc+"_colorRamp.outColor") ($metalDisc+"_colorRamp_gamma.value");
	connectAttr -f ($metalDisc+"_colorRamp_gamma.outValue") ($metalDisc+".color");
		
	connectAttr ($metalDisc+"_ramps_place2dTexture.outUV") ($metalDisc+"_reflRamp.uv");
	connectAttr ($metalDisc+"_ramps_place2dTexture.outUvFilterSize") ($metalDisc+"_reflRamp.uvFilterSize");
	connectAttr -f ($metalDisc+"_reflRamp.outColor") ($metalDisc+"_reflRamp_gamma.value");
	connectAttr -f ($metalDisc+"_reflRamp_gamma.outValue") ($metalDisc+".reflectionColor");
		
	connectAttr ($metalDisc+"_ramps_place2dTexture.outUV") ($metalDisc+"_anisRamp.uv");
	connectAttr ($metalDisc+"_ramps_place2dTexture.outUvFilterSize") ($metalDisc+"_anisRamp.uvFilterSize");
	connectAttr -f ($metalDisc+"_anisRamp.outAlpha") ($metalDisc+".anisotropyRotation");
		
	connectAttr ($metalDisc+"_ramps_place2dTexture.outUV") ($metalDisc+"_bumpRamp.uv");
	connectAttr ($metalDisc+"_ramps_place2dTexture.outUvFilterSize") ($metalDisc+"_bumpRamp.uvFilterSize");
	connectAttr -f ($metalDisc+"_bumpRamp.outColor") ($metalDisc+"_bumpRamp_gamma.value");
	connectAttr -f ($metalDisc+"_bumpRamp_gamma.outValue") ($metalDisc+".bumpMap");
	
		
	//Colour Ramp
	setAttr ($metalDisc+"_colorRamp.type") 4;
	setAttr ($metalDisc+"_colorRamp.interpolation") 3;
	setAttr ($metalDisc+"_colorRamp.colorEntryList[0].position") 0.3;
	setAttr ($metalDisc+"_colorRamp.colorEntryList[1].position") 0.4;
	setAttr ($metalDisc+"_colorRamp.colorEntryList[2].position") 0.6;
	setAttr ($metalDisc+"_colorRamp.colorEntryList[3].position") 0.75;
	setAttr ($metalDisc+"_colorRamp.colorEntryList[0].color") -type double3 0.36 0.35 0.32;
	setAttr ($metalDisc+"_colorRamp.colorEntryList[1].color") -type double3 0.26 0.25 0.20;
	setAttr ($metalDisc+"_colorRamp.colorEntryList[2].color") -type double3 0.60 0.57 0.47;
	setAttr ($metalDisc+"_colorRamp.colorEntryList[3].color") -type double3 0.16 0.15 0.13;

	
	//Refl Ramp
	setAttr ($metalDisc+"_reflRamp.type") 4;
	setAttr ($metalDisc+"_reflRamp.interpolation") 5;
	setAttr ($metalDisc+"_reflRamp.colorEntryList[0].position") 0.4;
	setAttr ($metalDisc+"_reflRamp.colorEntryList[1].position") 0.5;
	setAttr ($metalDisc+"_reflRamp.colorEntryList[2].position") 0.7;
	setAttr ($metalDisc+"_reflRamp.colorEntryList[3].position") 0.8;
	setAttr ($metalDisc+"_reflRamp.colorEntryList[0].color") -type double3 0.25 0.24 0.23;
	setAttr ($metalDisc+"_reflRamp.colorEntryList[1].color") -type double3 1.00 0.99 0.92;
	setAttr ($metalDisc+"_reflRamp.colorEntryList[2].color") -type double3 1.00 0.99 0.92;
	setAttr ($metalDisc+"_reflRamp.colorEntryList[3].color") -type double3 0.16 0.15 0.14;
	
	//Anis Ramp
	setAttr ($metalDisc+"_anisRamp.type") 3;
	setAttr ($metalDisc+"_anisRamp.interpolation") 1;
	removeMultiInstance -break true ($metalDisc+"_anisRamp.colorEntryList[2]");
	setAttr ($metalDisc+"_anisRamp.colorEntryList[0].position") 0.0;
	setAttr ($metalDisc+"_anisRamp.colorEntryList[1].position") 1.0;
	setAttr ($metalDisc+"_anisRamp.colorEntryList[0].color") -type double3 0 0 0;
	setAttr ($metalDisc+"_anisRamp.colorEntryList[1].color") -type double3 1 1 1;

	//Bump Ramp
	setAttr ($metalDisc+"_bumpRamp.type") 4;
	setAttr ($metalDisc+"_bumpRamp.interpolation") 1;
	
	int $rings = 200;
	
	for ($i = 1 ; $i <= $rings ; $i++) {
		float $centreGrey = 0.20;
		float $outsideGrey = 0.50;
		float $greyRange = $outsideGrey-$centreGrey;
		float $rampPosition = float($i) / float($rings);
		
		if ($i % 2 == 0) {
			float $greyValue = $outsideGrey - ( $greyRange * $rampPosition );
			
			setAttr ($metalDisc+"_bumpRamp.colorEntryList["+$i+"].color") -type double3 $greyValue $greyValue $greyValue;
		}
		else {
			setAttr ($metalDisc+"_bumpRamp.colorEntryList["+$i+"].color") -type double3 0.7 0.7 0.7;
		}	
		
		setAttr ($metalDisc+"_bumpRamp.colorEntryList["+$i+"].position") $rampPosition;
		//print $rampPosition;
	}
	
	//Set Last Attributes
	setAttr ($metalDisc+".diffuseColorAmount") 0.8;
	setAttr ($metalDisc+".brdfType") 2;
	setAttr ($metalDisc+".reflectionColorAmount") 0.7;
	setAttr ($metalDisc+".reflectionGlossiness") 0.8;
	setAttr ($metalDisc+".reflectionSubdivs") 24;
	setAttr ($metalDisc+".reflectionsMaxDepth") 2;
	setAttr ($metalDisc+".anisotropy") -0.9;

	setAttr ($metalDisc+".reflectionColorAmount") 0.7;
	setAttr ($metalDisc+".refractionIOR") 8;
	setAttr ($metalDisc+".bumpMult") 0.05;
	setAttr ($metalDisc+".useFresnel") 1;
	
	print "spckCreateBrakeMaterials Complete.\n";

}

//
//
// Add standard glass
//
// - created to roy specs


global proc spckCreateClearGlassMaterials() {

	string $glassSolid		= "VR_Glass_Clear_Solid";
	string $glassThin		= "VR_Glass_Clear_Thin";

	string $glassBin		= "Car_Glass";
	string $bulbBin			= "Car_Lights";
	
	string $materialList[] = { $glassSolid,
							$glassThin
							};
							
	// Check if window shader exists - if not create it - add to window bin
	for ($material in $materialList) {
		if (!objExists($material)){
			shadingNode -n $material -asShader VRayMtl;
			sets -renderable true -noSurfaceShader true -empty -name ($material+"SG");
			connectAttr -f ($material+".outColor") ($material+"SG.surfaceShader");
		}
		select -r $material;
		binMembership -add $glassBin;
		binMembership -add $bulbBin;
		
		//Setup common settings
		setAttr ($material+".color") -type double3 0 0 0;
		setAttr ($material+".brdfType") 1;
		setAttr ($material+".reflectionColor") -type double3 1 1 1;
		setAttr ($material+".reflectionColorAmount") 0.9;
		setAttr ($material+".refractionColor") -type double3 1 1 1;
		setAttr ($material+".useFresnel") 1;
	}
	
	//Setup Thick Glass
	setAttr ($glassSolid+".lockFresnelIORToRefractionIOR") 1;
	setAttr ($glassSolid+".fresnelIOR") 1.584;
	setAttr ($glassSolid+".refractionIOR") 1.584;

	//Setup Thin Glass
	setAttr ($glassThin+".lockFresnelIORToRefractionIOR") 0;
	setAttr ($glassThin+".fresnelIOR") 1.584;
	setAttr ($glassThin+".refractionIOR") 1.005;

	print "spckCreateClearGlassMaterials Complete.\n";

}


//
//
// Add window materials
//
// - created to roy specs

global proc spckCreateWindowMaterials() {

	spckCreateClearGlassMaterials();

	string $glassSmokeSolid		= "VR_Glass_Smoke_Solid";
	string $glassSmokeThin		= "VR_Glass_Smoke_Thin";
	string $glassSmokeOpaque	= "VR_Glass_Smoke_Opaque";

	string $windowBin			= "Car_Window_Glass";
	string $glassBin			= "Car_Glass";

	string $materialList[] = { $glassSmokeSolid,
							$glassSmokeThin,
							$glassSmokeOpaque
							};
							
	// Check if window shader exists - if not create it - add to window bin
	for ($material in $materialList) {
		if (!objExists($material)){
			shadingNode -n $material -asShader VRayMtl;
			sets -renderable true -noSurfaceShader true -empty -name ($material+"SG");
			connectAttr -f ($material+".outColor") ($material+"SG.surfaceShader");
			
			//Fog Ramp
			
			shadingNode -n ($material+"_fogRamp") -asTexture ramp;
			spinCreateLinearGammaUtility ( ($material+"_fogRamp_gamma") );
			
			removeMultiInstance -break true ($material+"_fogRamp.colorEntryList[1]");
			removeMultiInstance -break true ($material+"_fogRamp.colorEntryList[2]");
			
			connectAttr -f ($material+"_fogRamp.outColor") ($material+"_fogRamp_gamma.value");
			connectAttr -f ($material+"_fogRamp_gamma.outValue") ($material+".fogColor");
		}
		
		select -r $material;
		binMembership -add $windowBin;
		binMembership -add $glassBin;
		
		//Setup common settings
		setAttr ($material+".color") -type double3 0 0 0;
		setAttr ($material+".brdfType") 1;
		setAttr ($material+".reflectionColor") -type double3 1 1 1;
		setAttr ($material+".reflectionColorAmount") 0.9;
		setAttr ($material+".refractionColor") -type double3 1 1 1;
		setAttr ($material+".useFresnel") 1;
		setAttr ($material+"_fogRamp.colorEntryList[0].color") -type double3 0.93 0.95 0.94;
		setAttr ($material+".fogBias") 1;
		setAttr ($material+".doubleSided") 0;
		
		// Set Multimatte ID
		
		vrayAddAttr $material vrayColorId;
		vrayAddAttr $material vrayMaterialId;
		
		setAttr ($material+".vrayMaterialId") 3;

	}
	
	
	//Setup Thick Glass
	setAttr ($glassSmokeSolid+".lockFresnelIORToRefractionIOR") 0;
	setAttr ($glassSmokeSolid+".fresnelIOR") 1.584;
	setAttr ($glassSmokeSolid+".refractionIOR") 1.584;
	setAttr ($glassSmokeSolid+".fogMult") 1.0;

	//Setup Thin Glass
	setAttr ($glassSmokeThin+".lockFresnelIORToRefractionIOR") 0;
	setAttr ($glassSmokeThin+".fresnelIOR") 1.584;
	setAttr ($glassSmokeThin+".refractionIOR") 1.005;
	setAttr ($glassSmokeThin+".fogMult") 1.0;

	//Setup Opaque Glass
	setAttr ($glassSmokeOpaque+".lockFresnelIORToRefractionIOR") 0;
	setAttr ($glassSmokeOpaque+".fresnelIOR") 1.584;
	setAttr ($glassSmokeOpaque+".refractionIOR") 1.005;
	setAttr ($glassSmokeOpaque+"_fogRamp.colorEntryList[0].color") -type double3 0.19 0.195 0.192;
	setAttr ($glassSmokeOpaque+".fogMult") 0.2;

	print "spckCreateWindowMaterials Complete.\n";

}


//
//
// Add Paint materials
//
// - needs updating

global proc spckCreatePaintMaterials() {

	string $paintSilver		= "VR_Paint_Silver";
	string $paintWhite		= "VR_Paint_White";
	string $paintBlack		= "VR_Paint_Black";
	/*
	string $paintDarkGrey	= "VR_Paint_DarkGrey";
	string $paintChampagne	= "VR_Paint_Champagne";
	string $paintDarkRed	= "VR_Paint_DarkRed";
	string $paintRed		= "VR_Paint_Red";
	string $paintGreen		= "VR_Paint_Green";
	string $paintBlue		= "VR_Paint_Blue";
	string $paintNavy		= "VR_Paint_Navy";
	string $paintYellow		= "VR_Paint_Yellow";	
	*/
		
	string $materialList[] = { $paintSilver,
							$paintWhite,
							$paintBlack
							};
	
	/*
	string $materialList[] = { $paintSilver,
							$paintWhite,
							$paintBlack,
							$paintDarkGrey,
							$paintChampagne,
							$paintDarkRed,
							$paintRed,
							$paintGreen,
							$paintBlue,
							$paintNavy,
							$paintYellow
							};
	*/					
							
	string $paintBin 		= "Car_Paint";	
							
	// Check if paint shader exists - if not create it - add to paint bin
	for ($material in $materialList) {
		if (!objExists($material)){
			// Create blend material
			shadingNode -n $material -asShader VRayBlendMtl;
			sets -renderable true -noSurfaceShader true -empty -name ($material+"SG");
			connectAttr -f ($material+".outColor") ($material+"SG.surfaceShader");

			
			//create nodes for connection
			shadingNode -n ($material+"_base") -asShader VRayCarPaintMtl;
			shadingNode -n ($material+"_coat") -asShader VRayCarPaintMtl;

			connectAttr -f ($material+"_base.outColor") ($material+".base_material");
			connectAttr -f ($material+"_coat.outColor") ($material+".coat_material_0");
			
			shadingNode -n ($material+"_baseRamp") -asTexture ramp;
			shadingNode -n ($material+"_coatRamp") -asTexture ramp;

			shadingNode -n ($material+"_ramps_place2dTexture") -asUtility place2dTexture;
			
			shadingNode -n ($material+"_coatSampler") -asUtility samplerInfo;
			shadingNode -n ($material+"_baseSurfaceLuma") -asUtility surfaceLuminance;
			shadingNode -n ($material+"_baseSurfaceLumaClamp") -asUtility clamp;
			
			spinCreateLinearGammaUtility ( ($material+"_baseRamp_gamma") );
			spinCreateLinearGammaUtility ( ($material+"_coatRamp_gamma") );
			
			//Connect everything up
	
			connectAttr -f ($material+"_coatSampler.facingRatio") ($material+"_coatRamp.vCoord");
			connectAttr -f ($material+"_baseSurfaceLuma.outValue") ($material+"_baseSurfaceLumaClamp.inputR");
			connectAttr -f ($material+"_baseSurfaceLuma.outValue") ($material+"_baseSurfaceLumaClamp.inputG");
			connectAttr -f ($material+"_baseSurfaceLuma.outValue") ($material+"_baseSurfaceLumaClamp.inputB");
			connectAttr -f ($material+"_baseSurfaceLumaClamp.outputR") ($material+"_baseRamp.vCoord");

			connectAttr -f ($material+"_baseRamp.outColor") ($material+"_baseRamp_gamma.value");
			connectAttr -f ($material+"_coatRamp.outColor") ($material+"_coatRamp_gamma.value");
			
			connectAttr -f ($material+"_baseRamp_gamma.outValue") ($material+"_base.color");
			connectAttr -f ($material+"_coatRamp_gamma.outValue") ($material+"_coat.color");

			connectAttr -f ($material+"_ramps_place2dTexture.outUV") ($material+"_baseRamp.uvCoord");
			connectAttr -f ($material+"_ramps_place2dTexture.outUvFilterSize") ($material+"_baseRamp.uvFilterSize");

			connectAttr -f ($material+"_ramps_place2dTexture.outUV") ($material+"_coatRamp.uvCoord");
			connectAttr -f ($material+"_ramps_place2dTexture.outUvFilterSize") ($material+"_coatRamp.uvFilterSize");

			//Setup Ramps
			
			setAttr ($material+"_baseRamp.colorEntryList[0].position") 0;
			setAttr ($material+"_baseRamp.colorEntryList[1].position") 0.3;
			setAttr ($material+"_baseRamp.colorEntryList[2].position") 0.95;
			setAttr ($material+"_baseRamp.colorEntryList[3].position") 1;

			setAttr ($material+"_baseRamp.colorEntryList[0].color") -type double3 0.09   0.10   0.10;
			setAttr ($material+"_baseRamp.colorEntryList[1].color") -type double3 0.27   0.30   0.30;
			setAttr ($material+"_baseRamp.colorEntryList[2].color") -type double3 0.85   0.85   0.83;
			setAttr ($material+"_baseRamp.colorEntryList[3].color") -type double3 0.90   0.87   0.88;
			

			setAttr ($material+"_coatRamp.colorEntryList[0].position") 0;
			setAttr ($material+"_coatRamp.colorEntryList[1].position") 0.4;
			setAttr ($material+"_coatRamp.colorEntryList[2].position") 0.95;
			setAttr ($material+"_coatRamp.colorEntryList[3].position") 1;

			setAttr ($material+"_coatRamp.colorEntryList[0].color") -type double3 0.09   0.10   0.10;
			setAttr ($material+"_coatRamp.colorEntryList[1].color") -type double3 0.27   0.30   0.30;
			setAttr ($material+"_coatRamp.colorEntryList[2].color") -type double3 0.85   0.85   0.83;
			setAttr ($material+"_coatRamp.colorEntryList[3].color") -type double3 0.90   0.87   0.88;

			/*
			for ($i = 0; $i < 4 ; $i++ ) {
				connectAttr -f ($material+"_coatRamp.colorEntryList["+$i+"].position") ($material+"_baseRamp.colorEntryList["+$i+"].position");
				connectAttr -f ($material+"_coatRamp.colorEntryList["+$i+"].color") ($material+"_baseRamp.colorEntryList["+$i+"].color");
			}
			*/
			
			//Setup Clamp
			
			setAttr ($material+"_baseSurfaceLumaClamp.maxR") 1.0;	
			setAttr ($material+"_baseSurfaceLumaClamp.maxG") 1.0;
			setAttr ($material+"_baseSurfaceLumaClamp.maxB") 1.0;
			
			// Remove flakes
			setAttr ($material+"_base.flake_density") 0;
			setAttr ($material+"_coat.flake_density") 0;
			
			// Dont update base and coat swatches
			
			setAttr ($material+"_base.swatchAutoUpdate") 0;
			setAttr ($material+"_coat.swatchAutoUpdate") 0;
			
			// Set Multimatte ID
			
			vrayAddAttr $material vrayColorId;
			vrayAddAttr $material vrayMaterialId;
			
			setAttr ($material+".vrayMaterialId") 1;
		}
				
		select -r $material;
		binMembership -add $paintBin;
		
		select -r ($material+"_coat");
		binMembership -rm $paintBin;
		
		select -r ($material+"_base");
		binMembership -rm $paintBin;

	}
	print "spckCreatePaintMaterials Complete.\n";

}
//
//
// Add essential tech materials
//
// - created to throb specs

global proc spckCreateTechMaterials() {

	string $aoTex	 				= "VR_Dirt_AO";
	string $samplerInfo 			= "VR_Tech_Sampler";
	string $topDowntex 				= "VR_Top_Down";
	
	string $techBin					= "Technical";
	

	// Create AO
	if (!objExists($aoTex)){
		shadingNode -n $aoTex -asTexture VRayDirt;
	
		select -r $aoTex;
		binMembership -add $techBin;	
	}
	
	// Create XYZ
	if (!objExists($samplerInfo)){
	
		shadingNode -n $samplerInfo -asUtility samplerInfo;
	
		select -r $samplerInfo;
		binMembership -add $techBin;	
	}
	/*
	// Create TopDown
	if (!objExists($topDowntex)){
		catchQuiet ( vrayCreateNodeFromDll ($topDowntex, "texture", "TexFalloff", 2));
		setAttr ($topDowntex+".color1") -type double3 1 0 0 ;
		setAttr ($topDowntex+".color2") -type double3 1 0 0 ;
		setAttr ($topDowntex+".direction_type") 2;
		
		select -r $topDowntex;
		binMembership -add $techBin;	
	}
	*/
	print "spckCreateTechMaterials Complete.\n";
}



