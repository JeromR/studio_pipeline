// spckRigCar_v0.1.mel
//
// By Daniel Harkness


// Rig Car

global proc spckRigCar() {

	string $Car		 			= "CarX";
	string $WheelRear_R 		= "_WheelRear_R";
	string $WheelRear_L 		= "_WheelRear_L";
	string $WheelFront_R 		= "_WheelFront_R";
	string $WheelFront_L 		= "_WheelFront_L";
	string $BrakeRear_L 		= "_BrakeRear_L";
	string $BrakeRear_R 		= "_BrakeRear_R";
	string $BrakeFront_L 		= "_BrakeFront_L";
	string $BrakeFront_R 		= "_BrakeFront_R";
	string $Wheels 				= "_Wheels";
	string $WheelsRear 			= "_WheelsRear";
	string $WheelsFront 		= "_WheelsFront";
	string $Body 				= "_Body";
	string $FrontContact_L 		= "_FrontContact_L";
	string $FrontContact_R 		= "_FrontContact_R";
	string $RearContact_L 		= "_RearContact_L";
	string $RearContact_R 		= "_RearContact_R";
	
	int $tempRand				= `rand 100000`;
	string $tempName			= "_temp_"+$tempRand;
	
	int $shouldProceed			= 0;

	// Creating a dialogue box to request the car name.
	string $result = `promptDialog 
		-title "spckAddCar"
		-message "Enter Letter of car to rig:"
		-button "OK" -button "Cancel"
		-defaultButton "OK" -cancelButton "Cancel"
		-dismissString "Cancel"`;
	
	// If OK pressed on the dialogue box...
	if ($result == "OK") {
	
		// Query the entry typed by the user and then use it for variable CarAString.
		$Car = `promptDialog -query -text`;
		
		if (size ($Car) == 1) {
			if (isValidString ($Car, "([a-zA-Z]+)([a-zA-Z])*")){
				$Car = toupper ($Car);
				$Car = "Car"+$Car;
				if ( !`objExists $Car`){
					print("That car doesn't exist.\n");
					return;
				}
			}
			else{
				print("Invalid Character. Please re-run the script again.\n"); return;
			}
		}
		else{
			print("Invalid Character. Please re-run the script again.\n"); return;
		}
	}				  
	else {
		print("Please re-run the script again.\n"); return;
	}

	//
	//
	//
	// Start rigging Car
	//
	//
	//
	
	select -cl;

	float $bounds[];
	string $selectItem;
	string $selectBrakes;
	string $selectedGroup;
	string $select[];
	float $pivotX;
	float $pivotY;
	float $pivotZ;
	
	//
	//
	// ====================== Wheels =====================================
	//
	//
	
	string $wheelList[] = { ($Car + $WheelRear_L),
							($Car + $WheelRear_R),
							($Car + $WheelFront_L),
							($Car + $WheelFront_L)
							};
							
	string $brakeList[] = { ($Car + $WheelRear_L),
							($Car + $WheelRear_R),
							($Car + $WheelFront_L),
							($Car + $WheelFront_L)
							};
	
	for ( $i=0 ; $i < 4 ;$i++ ) {
	
		string $wheel = $wheelList[$i];
		string $brake = $brakeList[$i];
	
	// Constrain brake to wheel first before adjusting then unconstrain
	
	select -r ($Car + $WheelRear_L);
	select -add ($Car + $BrakeRear_L) ;
	doCreateParentConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
	parentConstraint -name ($Car+$tempName) -weight 1;
	
	$selectItem = $Car + $WheelRear_L;
	spckAlignWheel ($selectItem);
	
	delete ($Car+$tempName);
	$selectBrakes = $Car + $BrakeRear_L;
	
	$selectedGroup = `select -r $selectItem`;
	$select = `ls -sl`;
	
	$bounds = getAnimatedBoundsForMeshes( $select );
	$pivotX = $bounds[0];
	$pivotY = ($bounds[1]+$bounds[4])/2;
	$pivotZ = ($bounds[2]+$bounds[5])/2;
	move -a -os $pivotX $pivotY $pivotZ ($selectItem+".scalePivot") ($selectItem+".rotatePivot") ;
	move -a -os $pivotX $pivotY $pivotZ ($selectBrakes+".scalePivot") ($selectBrakes+".rotatePivot") ;

	// ====================== Rear Right Wheel ============================
	
	// Constrain brake to wheel first before adjusting then unconstrain
	
	select -r ($Car + $WheelRear_R);
	select -add ($Car + $BrakeRear_R);
	doCreateParentConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
	parentConstraint -name ($Car+$tempName) -weight 1;
	
	$selectItem = $Car + $WheelRear_R;
	spckAlignWheel ($selectItem);

	delete ($Car+$tempName);
	$selectBrakes = $Car + $BrakeRear_R;
	
	$selectedGroup = `select -r $selectItem`;
	$select = `ls -sl`;
	
	$bounds = getAnimatedBoundsForMeshes( $select );
	$pivotX = $bounds[3];
	$pivotY = ($bounds[1]+$bounds[4])/2;
	$pivotZ = ($bounds[2]+$bounds[5])/2;
	move -a -os $pivotX $pivotY $pivotZ ($selectItem+".scalePivot") ($selectItem+".rotatePivot") ;
	move -a -os $pivotX $pivotY $pivotZ ($selectBrakes+".scalePivot") ($selectBrakes+".rotatePivot") ;

	// ====================== Front Left Wheel ============================
	
	// Constrain brake to wheel first before adjusting then unconstrain
	
	select -r ($Car + $WheelFront_L);
	select -add ($Car + $BrakeFront_L) ;
	doCreateParentConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
	parentConstraint -name ($Car+$tempName) -weight 1;

	$selectItem = $Car + $WheelFront_L;
	spckAlignWheel ($selectItem);

	delete ($Car+$tempName);
	$selectBrakes = $Car + $BrakeFront_L;

	$selectedGroup = `select -r $selectItem`;
	$select = `ls -sl`;
	
	$bounds = getAnimatedBoundsForMeshes( $select );
	$pivotX = $bounds[0];     // set pivot to inside of wheel
	$pivotY = ($bounds[1]+$bounds[4])/2;
	$pivotZ = ($bounds[2]+$bounds[5])/2;
	move -a -os $pivotX $pivotY $pivotZ ($selectItem+".scalePivot") ($selectItem+".rotatePivot") ;
	move -a -os $pivotX $pivotY $pivotZ ($selectBrakes+".scalePivot") ($selectBrakes+".rotatePivot") ;

	// ====================== Front Right Wheel ============================
	
	// Constrain brake to wheel first before adjusting then unconstrain

	select -r ($Car + $WheelFront_R);
	select -add ($Car + $BrakeFront_R) ;
	doCreateParentConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
	parentConstraint -name ($Car+$tempName) -weight 1;

	$selectItem = $Car + $WheelFront_R;
	spckAlignWheel ($selectItem);
	
	delete ($Car+$tempName);
	$selectBrakes = $Car + $BrakeFront_R;
	
	$selectedGroup = `select -r $selectItem`;
	$select = `ls -sl`;
	
	$bounds = getAnimatedBoundsForMeshes( $select );
	$pivotX = $bounds[3];     // set pivot to inside of wheel
	$pivotY = ($bounds[1]+$bounds[4])/2;
	$pivotZ = ($bounds[2]+$bounds[5])/2;
	move -a -os $pivotX $pivotY $pivotZ ($selectItem+".scalePivot") ($selectItem+".rotatePivot") ;
	move -a -os $pivotX $pivotY $pivotZ ($selectBrakes+".scalePivot") ($selectBrakes+".rotatePivot") ;
		
	
	// create rotation dummy
	
	string $selectWheels[] = { ($Car + $WheelRear_L), ($Car + $WheelRear_R), ($Car + $WheelFront_L), ($Car + $WheelFront_L) };
	float $wheelRadius[];
	for ( $i=0 ; $i<4 ; $i++ ){
		$selectedGroup = `select -r ($selectWheels[$i])`;
		$select = `ls -sl`;

		$bounds = getAnimatedBoundsForMeshes( $select );
		
		float $minY = abs($bounds[1]);
		float $maxY = abs($bounds[4]);
		float $minZ = abs($bounds[2]);
		float $maxZ = abs($bounds[5]);
		float $radiusY;
		float $radiusZ;
		
		if ($minY > $maxY){
			$radiusY = $minY - $maxY;
		}
		if ($minY <= $maxY){
			$radiusY = $maxY - $minY;
		}
		
		if ($minZ > $maxZ){
			$radiusZ = $minZ - $maxZ;			
		}
		if ($minZ <= $minZ){
			$radiusZ = $maxZ - $minZ;			
		}
		
		$wheelRadius[$i] = ($radiusY+$radiusZ)/2;
		print ($selectWheels[$i]+" "+$wheelRadius[$i]+"\n");
	};
	
	float $cylinderRadius = ($wheelRadius[0]+$wheelRadius[1]+$wheelRadius[2]+$wheelRadius[3])/4;
	string $rotationDummy = $Car+"_rotationDummy";
	polyCylinder -name $rotationDummy -ch on -o on -sx 36 -ax 1 0 0 -r $cylinderRadius -h 20 -sc 1 -cuv 3 ;
	
	
	// Create main rotation dummy
	
	parent $rotationDummy $Car;
	
	float $wheelPosition[3] = `xform -query -rotatePivot ($Car + $WheelsRear)`;
	move -a -os $wheelPosition[0] $wheelPosition[1] $wheelPosition[2] $rotationDummy;
	
	// Create four wheel dummys
	
	string $wheelDummyFL = $Car+"_wheelDummyFL";
	string $wheelDummyFR = $Car+"_wheelDummyFR";
	string $wheelDummyRL = $Car+"_wheelDummyRL";
	string $wheelDummyRR = $Car+"_wheelDummyRR";
	
	polyCylinder -name $wheelDummyFL -ch on -o on -sx 36 -ax 1 0 0 -r $cylinderRadius -h 20 -sc 1 -cuv 3 ;
	polyCylinder -name $wheelDummyFR -ch on -o on -sx 36 -ax 1 0 0 -r $cylinderRadius -h 20 -sc 1 -cuv 3 ;
	polyCylinder -name $wheelDummyRL -ch on -o on -sx 36 -ax 1 0 0 -r $cylinderRadius -h 20 -sc 1 -cuv 3 ;
	polyCylinder -name $wheelDummyRR -ch on -o on -sx 36 -ax 1 0 0 -r $cylinderRadius -h 20 -sc 1 -cuv 3 ;
	
	
	parent $wheelDummyFL $Car;
	parent $wheelDummyFR $Car;
	parent $wheelDummyRL $Car;
	parent $wheelDummyRR $Car;


	$wheelPosition = `xform -query -rotatePivot ($Car + $WheelFront_L)`;
	move -a -os ($wheelPosition[0]+10) $wheelPosition[1] $wheelPosition[2] $wheelDummyFL;

	$wheelPosition = `xform -query -rotatePivot ($Car + $WheelFront_R)`;
	move -a -os ($wheelPosition[0]-10) $wheelPosition[1] $wheelPosition[2] $wheelDummyFR;

	$wheelPosition = `xform -query -rotatePivot ($Car + $WheelRear_L)`;
	move -a -os ($wheelPosition[0]+10) $wheelPosition[1] $wheelPosition[2] $wheelDummyRL;

	$wheelPosition = `xform -query -rotatePivot ($Car + $WheelRear_R)`;
	move -a -os ($wheelPosition[0]-10) $wheelPosition[1] $wheelPosition[2] $wheelDummyRR;
	
	
	// Make steering
	string $steeringDummy = $Car+"_steeringDummy";
	polyCone -name $steeringDummy -ch on -o on -ax 0 0 1 -r 25 -h 100 -cuv 3 ;
	parent $steeringDummy $Car;
	float $steeringPosition[3] = `xform -query -rotatePivot ($Car + $WheelsFront)`;
	move -a -os $steeringPosition[0] $steeringPosition[1] $steeringPosition[2] $steeringDummy;
	transformLimits -rx 0 0 -erx 1 0 $steeringDummy;
	transformLimits -rz 0 0 -erx 1 0 $steeringDummy;


	// ====================== Setup Wheel Constraints ======================
	
	// Constrain dummies to main dummy rotation
	
	group -name ($Car+"_steerFL") -parent $Car $wheelDummyFL;
	group -name ($Car+"_steerFR") -parent $Car $wheelDummyFR;
	
	
	connectAttr -f ($rotationDummy+".rotateX") ($wheelDummyFL+".rotateX");
	connectAttr -f ($rotationDummy+".rotateX") ($wheelDummyFR+".rotateX");
	connectAttr -f ($rotationDummy+".rotateX") ($wheelDummyRL+".rotateX");
	connectAttr -f ($rotationDummy+".rotateX") ($wheelDummyRR+".rotateX");

	connectAttr -f ($steeringDummy+".rotateY") ($Car+"_steerFL"+".rotateY");
	connectAttr -f ($steeringDummy+".rotateY") ($Car+"_steerFR"+".rotateY");
	
	// Constrain real wheels to dummy wheels
	
	connectAttr -f ($rotationDummy+".rotateX") ($Car+$WheelRear_L+".rotateX");
	connectAttr -f ($rotationDummy+".rotateX") ($Car+$WheelRear_R+".rotateX");

	connectAttr -f ($steeringDummy+".rotateY") ($Car+$BrakeFront_L+".rotateY");
	connectAttr -f ($steeringDummy+".rotateY") ($Car+$BrakeFront_R+".rotateY");
	
	
	select -r $wheelDummyFL ;
	select -add ($Car + $WheelFront_L) ;
	doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
	orientConstraint -offset 0 0 0 -weight 1;
	
	select -r $wheelDummyFR ;
	select -add ($Car + $WheelFront_R) ;
	doCreateOrientConstraintArgList 1 { "0","0","0","0","0","0","0","1","","1" };
	orientConstraint -offset 0 0 0 -weight 1;



	// ====================== Body =====================================
	
	$selectItem = $Car + $Wheels;
	string $selectedWheelGroup = `select -r $selectItem`;
	$select = `ls -sl`;

	float $wheelBounds[] = getAnimatedBoundsForMeshes( $select ); //use the top of wheels as pivot for car

	$selectItem = $Car + $Body;
	$selectedGroup = `select -r $selectItem`;
	$select = `ls -sl`;

	$bounds = getAnimatedBoundsForMeshes( $select );
	$pivotX = ($bounds[0]+$bounds[3])/2;
	$pivotY = $wheelBounds[4];
	$pivotZ = ($bounds[2]+$bounds[5])/2;
	move -a -os $pivotX $pivotY $pivotZ ($selectItem+".scalePivot") ($selectItem+".rotatePivot") ;

	// ================== Group Rig ==========================
	
	group -name ($Car+"_Rig") -parent $Car ($Car+"_steerFL") ($Car+"_steerFR") $wheelDummyRL $wheelDummyRR;

	
	select -cl;	
	
	// Give some feedback for next steps
	
	string $message = "\nEat some poo.";
	
	string $result = `confirmDialog 
		-title "spckRenameCar Success!"
		-message $message
		-button "OK"
		-defaultButton "OK"`;
	print "Complete.\n";
}




// Get boundry coordinates of selection

global proc float[] getAnimatedBoundsForMeshes( string $skinList[] ) {

	float $bounds[];
	float $skinMinBoundsX[];
	float $skinMinBoundsY[];
	float $skinMinBoundsZ[];
	float $skinMaxBoundsX[];
	float $skinMaxBoundsY[];
	float $skinMaxBoundsZ[];
	
	
	for( $skin in $skinList ) {
		$skinMinBoundsX[( `size $skinMinBoundsX` )] = `getAttr ( $skin + ".boundingBoxMinX" )`;
		$skinMinBoundsY[( `size $skinMinBoundsY` )] = `getAttr ( $skin + ".boundingBoxMinY" )`;
		$skinMinBoundsZ[( `size $skinMinBoundsZ` )] = `getAttr ( $skin + ".boundingBoxMinZ" )`;
		$skinMaxBoundsX[( `size $skinMaxBoundsX` )] = `getAttr ( $skin + ".boundingBoxMaxX" )`;
		$skinMaxBoundsY[( `size $skinMaxBoundsY` )] = `getAttr ( $skin + ".boundingBoxMaxY" )`;
		$skinMaxBoundsZ[( `size $skinMaxBoundsZ` )] = `getAttr ( $skin + ".boundingBoxMaxZ" )`;		
	}
	
	$skinMinBoundsX = `sort $skinMinBoundsX`;
	$skinMinBoundsY = `sort $skinMinBoundsY`;
	$skinMinBoundsZ = `sort $skinMinBoundsZ`;
	$skinMaxBoundsX = `sort $skinMaxBoundsX`;
	$skinMaxBoundsY = `sort $skinMaxBoundsY`;
	$skinMaxBoundsZ = `sort $skinMaxBoundsZ`;
	
	$bounds[0] = $skinMinBoundsX[0];
	$bounds[1] = $skinMinBoundsY[0];
	$bounds[2] = $skinMinBoundsZ[0];
	$bounds[3] = $skinMaxBoundsX[( `size $skinMaxBoundsX` - 1 )];
	$bounds[4] = $skinMaxBoundsY[( `size $skinMaxBoundsY` - 1 )];
	$bounds[5] = $skinMaxBoundsZ[( `size $skinMaxBoundsZ` - 1 )];
	
	return $bounds;
}

// Get boundry coordinates of selection

global proc float[] getAnimatedSizeForMeshes( string $skinList[] ) {

	float $bounds[];
	float $skinSizeBoundsX[];
	float $skinSizeBoundsY[];
	float $skinSizeBoundsZ[];	
	
	for( $skin in $skinList ) {
		$skinSizeBoundsX[( `size $skinSizeBoundsX` )] = `getAttr ( $skin + ".boundingBoxSizeX" )`;
		$skinSizeBoundsY[( `size $skinSizeBoundsY` )] = `getAttr ( $skin + ".boundingBoxSizeY" )`;
		$skinSizeBoundsZ[( `size $skinSizeBoundsZ` )] = `getAttr ( $skin + ".boundingBoxSizeZ" )`;
	}
	
	$skinSizeBoundsX = `sort $skinSizeBoundsX`;
	$skinSizeBoundsY = `sort $skinSizeBoundsY`;
	$skinSizeBoundsZ = `sort $skinSizeBoundsZ`;
	
	$bounds[0] = $skinSizeBoundsX[0];
	$bounds[1] = $skinSizeBoundsY[0];
	$bounds[2] = $skinSizeBoundsZ[0];
	
	return $bounds;
}

// Fix bad alignment of a wheel

global proc spckAlignWheel( string $selectItem ) {

	print "Aligning Wheels!\n\n";

	$selectedGroup = `select -r $selectItem`;
	$select = `ls -sl`;

	viewFit -animate 1; allViewFit(0);
	
	$bounds = getAnimatedBoundsForMeshes( $select );
	$pivotX = ($bounds[0]+$bounds[3])/2;
	$pivotY = ($bounds[1]+$bounds[4])/2;
	$pivotZ = ($bounds[2]+$bounds[5])/2;
	move -a -os $pivotX $pivotY $pivotZ ($selectItem+".scalePivot") ($selectItem+".rotatePivot");
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

	float $sizeBounds[] = getAnimatedSizeForMeshes( $select );
	float $sizeX = $sizeBounds[0];
	float $sizeY = $sizeBounds[1];
	float $sizeZ = $sizeBounds[2];
	float $newSizeX = $sizeX;
	float $newSizeY = $sizeY;
	float $newSizeZ = $sizeZ;
	
	float $nudge = 0.1;
	float $threshold = 0.001;
	float $difference = 1.0;

		
	for ($i=0 ; $i<3 ; $i++ ) { //filter through the process twice
		// Align wheel on X-bounds, Y-Axis
		
	
		rotate -r -os 0 $nudge 0;
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		refresh -f;
		$sizeBounds = getAnimatedSizeForMeshes( $select );
		float $newSizeXpos = $sizeBounds[0];
	
		rotate -r -os 0 (-2*$nudge) 0;
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		refresh -f;
		$sizeBounds = getAnimatedSizeForMeshes( $select );
		float $newSizeXneg = $sizeBounds[0];
		rotate -r -os 0 $nudge 0;
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		refresh -f;
		
		print ("Original X size is "+ $sizeX + "\n");
		print ("Pos Rot X size is "+ $newSizeXpos + "\n");
		print ("Neg Rot X size is "+ $newSizeXneg + "\n\n");
	
		if ( $newSizeXpos < $newSizeXneg ) {
			print "Positive Rotate was smaller\n\n";
		}
		else if ( $newSizeXpos > $newSizeXneg ){
			print "Negative Rotate was smaller\n\n";
			$nudge = -$nudge;
		}
		else {
			$newSizeX=$sizeX;
			$difference = -1;
		}
	
		while ( $difference > 0 ) {
			
			$sizeX = $newSizeX;
	
			rotate -r -os 0 $nudge 0;
			makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
			refresh -f;
			$sizeBounds = getAnimatedSizeForMeshes( $select );
			$newSizeX = $sizeBounds[0];
			$difference = $sizeX - $newSizeX;
			
			/*
			print ("sizeX = "+$sizeX+"\n"); 
			print ("newSizeX = "+$newSizeX+"\n"); 
			print ($sizeX - $newSizeX);
			print "\n";
	
			print $difference;
			*/
		}	
		
		// Align wheel on X-bounds, Z-axis
		$difference = 1;
		
		rotate -r -os 0 0 $nudge;
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		refresh -f;
		$sizeBounds = getAnimatedSizeForMeshes( $select );
		float $newSizeXpos = $sizeBounds[0];
	
		rotate -r -os 0 0 (-2*$nudge);
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		refresh -f;
		$sizeBounds = getAnimatedSizeForMeshes( $select );
		float $newSizeXneg = $sizeBounds[0];
		rotate -r -os 0 0 $nudge;
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		refresh -f;
		
		print ("Original X size is "+ $sizeX + "\n");
		print ("Pos Rot X size is "+ $newSizeXpos + "\n");
		print ("Neg Rot X size is "+ $newSizeXneg + "\n\n");
	
		if ( $newSizeXpos < $newSizeXneg ) {
			print "Positive Rotate was smaller\n\n";
		}
		else if ( $newSizeXpos > $newSizeXneg ){
			print "Negative Rotate was smaller\n\n";
			$nudge = -$nudge;
		}
		else {
			$newSizeX=$sizeX;
			$difference = -1;
		}
	
		while ( $difference > 0 ) {
			
			$sizeX = $newSizeX;
	
			rotate -r -os 0 0 $nudge;
			makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
			refresh -f;
			$sizeBounds = getAnimatedSizeForMeshes( $select );
			$newSizeX = $sizeBounds[0];
			$difference = $sizeX - $newSizeX;
			
			/*
			print ("sizeX = "+$sizeX+"\n"); 
			print ("newSizeX = "+$newSizeX+"\n"); 
			print ($sizeX - $newSizeX);
			print "\n";
	
			print $difference;
			*/
		}	
	}
		
	 
	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
}

