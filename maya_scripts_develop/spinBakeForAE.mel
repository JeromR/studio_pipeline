// spinDuplicateAndBakeCamera v0.2
//
// By Daniel Harkness
//
// Take cameras in selection and bake to root DAG level
//

global proc spinBakeForAE () {

	string $bakedDataforAE = "BakedDataForAE";

	if ( objExists ($bakedDataforAE)) {
		confirmDialog -message "Aborting. The scene already contains data for AE";
		print("Aborted.\n");
		return;
	}

	
	string $bakeFirst;
	string $bakeLast;

	// Get Bake Range.
	string $result = `promptDialog 
		-title "Bake Range Start"
		-message "Enter start baking frame:"
		-button "OK" -button "Cancel"
		-defaultButton "OK" -cancelButton "Cancel"
		-dismissString "Cancel"`;
	
	// If OK pressed on the dialogue box...
	if ($result == "OK") {
		$bakeFirst = `promptDialog -query -text`;
	}				  
	else {
		print("Aborted.\n");
		return;
	}

	string $result = `promptDialog 
		-title "Bake Range End"
		-message "Enter end baking frame:"
		-button "OK" -button "Cancel"
		-defaultButton "OK" -cancelButton "Cancel"
		-dismissString "Cancel"`;
	
	// If OK pressed on the dialogue box...
	if ($result == "OK") {
		$bakeLast = `promptDialog -query -text`;
	}				  
	else {
		print("Aborted.\n");
		return;
	}

	// Go through selection and do only to cameras and locators starting with "null"
	// Duplicate Camera and bake

	string $bakeRange			= $bakeFirst+":"+$bakeLast;
	string $selectedItems[] 	= `ls -selection -dag`;
	
	
	// If nothing is selected, select everything
	
	if (size($selectedItems) == 0) {
		$selectedItems = `ls -dag`;
	}
	
	// Get list of objects to duplicate
	
	string $objectsToDuplicate[];
	int $i = 0;

	for ( $node in $selectedItems )     // process each selection
	{
		string $objType = `nodeType $node`;
		if (  $objType == "camera" ||  $objType == "locator" )
		
		{
		
			string $object;
			$object = $selectedItems[$i-1];
			
			if ( stringArrayContains ($object, $objectsToDuplicate))
			{
				confirmDialog -message "Aborting. Objects require unique names";
				print("Aborted.\n");
				return;
			}
			
			stringArrayInsertAtIndex(size($objectsToDuplicate), $objectsToDuplicate, $object);
			
		}
		$i++;
	}
	
	// Duplicate and parent objects
	
	group -em -n $bakedDataforAE;
	string $duplicateObjects[];
	
	for ( $object in $objectsToDuplicate )
	{
		string $objType = `nodeType $object`;
		if ( $objType == "locator" )
		{
			string $duplicateObject = "null_"+$object+"_tempDuplicate";
			duplicate -rr -n $duplicateObject $object;
			string $duplicateObject = substituteAllString($duplicateObject, "|", "_"); // fix for maya 2013, duplicate object now includes group name
			string $object = substituteAllString($object, "|", "_"); // fix for maya 2013, duplicate object now includes group name
			
			parent $duplicateObject $bakedDataforAE;
			
			stringArrayInsertAtIndex(size($duplicateObjects), $duplicateObjects, $duplicateObject);
	
			// CONSTRAIN NEW TO OLD
			select -r $object;
			select -add $duplicateObject;
			doCreateParentConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
			parentConstraint -n ($object+"_tempParentConstraint") -mo -weight 1;
		}

		if ( $objType == "camera" )
		{
			string $duplicateObject = ("cam_"+$object+"_tempDuplicate");
			string $duplicateObject = substituteAllString($duplicateObject, "|", "_"); // fix for maya 2013, duplicate object now includes group name
			float $focalLength = getAttr ($object+".focalLength");
			
			camera -name $duplicateObject -centerOfInterest 5 -focalLength $focalLength -lensSqueezeRatio 1 -cameraScale 1 -horizontalFilmAperture 1.41732 -horizontalFilmOffset 0 -verticalFilmAperture 0.94488 -verticalFilmOffset 0 -filmFit Fill -overscan 1 -motionBlur 0 -shutterAngle 144 -nearClipPlane 0.1 -farClipPlane 10000 -orthographic 0 -orthographicWidth 30 -panZoomEnabled 0 -horizontalPan 0 -verticalPan 0 -zoom 1;
			rename ( $duplicateObject+"1")  $duplicateObject;
			
			parent $duplicateObject $bakedDataforAE;
			
			stringArrayInsertAtIndex(size($duplicateObjects), $duplicateObjects, $duplicateObject);
	
			// CONSTRAIN NEW TO OLD
			select -r $object;
			select -add $duplicateObject;
			$parentConstraintName = ($object+"_tempParentConstraint");
			string $parentConstraintName = substituteAllString($parentConstraintName, "|", "_"); // fix for maya 2013, duplicate object now includes group name
			doCreateParentConstraintArgList 1 { "1","0","0","0","0","0","0","1","","1" };
			parentConstraint -n $parentConstraintName -mo -weight 1;
			
			setAttr ($parentConstraintName+".target[0].targetOffsetTranslateX") 0;
			setAttr ($parentConstraintName+".target[0].targetOffsetTranslateY") 0;
			setAttr ($parentConstraintName+".target[0].targetOffsetTranslateZ") 0;
			setAttr ($parentConstraintName+".target[0].targetOffsetRotateX") 0;
			setAttr ($parentConstraintName+".target[0].targetOffsetRotateY") 0;
			setAttr ($parentConstraintName+".target[0].targetOffsetRotateZ") 0;

		}


	}

	bakeResults -simulation true -t $bakeRange -sampleBy 1 -disableImplicitControl true -preserveOutsideKeys true -sparseAnimCurveBake false -removeBakedAttributeFromLayer false -bakeOnOverrideLayer false -controlPoints false -shape true $duplicateObjects;
	
	for ( $object in $objectsToDuplicate ) {
		string $object = substituteAllString($object, "|", "_"); // fix for maya 2013, duplicate object now includes group name
		print $object;
		//rename ($bakedDataforAE+"|"+$object+"_tempDuplicate") ($object+"_baked");
		//delete ($bakedDataforAE+"|"+$object+"_tempParentConstraint");
	}
}
