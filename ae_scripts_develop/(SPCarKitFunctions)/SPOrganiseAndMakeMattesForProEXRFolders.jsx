// SPOrganiseAndMakeMattesForProEXRFolders ()// Run on the folder that is created after running ProEXR{	function StringHasIndexFromArray ( s, a ) 	{		for (var i=0, len=a.length; i<len; i++){			if  (s.indexOf(a[i]) != -1){				return true;			}		}		return false;	}	function LayerHasEffect ( layer , effectMatchName ) 	{		var effects = layer.Effects;				for (var i=1, len=effects.numProperties; i<=len; i++)		{			var effect = effects.property(i);			if ( effect.matchName == effectMatchName){				return true;			}			}		return false;	}	function SPDelineariseFirstLayerInItems( selectedItems) 	{		var i=0;		var len=selectedItems.length;		try { selectedItems[0]; }		catch(err) { i=1; len++;}				for ( i ; i<len; i++)		{			var selectedItem = selectedItems[i];			if (selectedItem instanceof CompItem)			{				if ( !StringHasIndexFromArray ( selectedItem.name, ["RGB","RGBA"]))				{					var layer = selectedItem.layer(1);					if ( !LayerHasEffect ( layer, "ADBE ProfileToProfile")){						var effect = layer.Effects.addProperty("ADBE ProfileToProfile");						effect.property("Linearize Input Profile").setValue(1);					}				}			}		}	}	function SPOrganiseVRayRenderElementsInFolder ( selectedItem)	{		var items = selectedItem.items;		var matteFolder = items.addFolder ( "Mattes" );		var techFolder = items.addFolder ( "Tech Passes" );		var colourFolder = items.addFolder ( "Colour Passes" );		var lightPasses = items.addFolder ( "Light Select Passes" );				var itemsNotFolders = [];		for (var i=1, len=items.length+1; i<len; i++)		{			var item = items[i];			if ( !( item instanceof FolderItem ))			{				itemsNotFolders.push (item);			}		}				for (var i=0, len=itemsNotFolders.length; i<len; i++)		{			var item = itemsNotFolders[i];			if  (item.name.indexOf("multimatte") != -1){				item.parentFolder = matteFolder;			}			if  (item.name.indexOf("lightselect") != -1){				item.parentFolder = lightPasses;			}			if (StringHasIndexFromArray ( item.name , ["diffuse","GI","lighting","reflect","refract","RGB","selfIllum","specular"] )){				item.parentFolder = colourFolder;			}			if (StringHasIndexFromArray ( item.name, ["zDepth","AO","Normals","XYZ","UV"] )){				item.parentFolder = techFolder;			}		}		return [matteFolder,techFolder,colourFolder,lightPasses];	}	function SPCreateLumaMattesFromRGB ( theComp , baseName , rName , gName , bName )	{		var matteCompR = theComp.duplicate ();		var matteCompG = theComp.duplicate ();		var matteCompB = theComp.duplicate ();				matteCompR.name = baseName+rName;		matteCompG.name = baseName+gName;		matteCompB.name = baseName+bName;				var matteComps = [matteCompR,matteCompG,matteCompB];				for (var i=0, len=matteComps.length; i<len; i++){			var matteComp = matteComps[i];			while ( matteComp.numLayers > 0 )			{				var layer = matteComp.layer(1);				layer.remove();							}			matteComp.layers.add(theComp);			var layer = matteComp.layer(1);			var effect = layer.Effects.addProperty("ADBE Shift Channels");			effect.property("Take Red From").setValue(1);			effect.property("Take Green From").setValue(1);			effect.property("Take Blue From").setValue(1);		}		matteCompR.layer(1).Effects.property("ADBE Shift Channels").property("Take Alpha From").setValue(2);		matteCompG.layer(1).Effects.property("ADBE Shift Channels").property("Take Alpha From").setValue(3);		matteCompB.layer(1).Effects.property("ADBE Shift Channels").property("Take Alpha From").setValue(4);	}	function SPGetCarMultimatteChannelNames ( theComp )	{		if  (theComp.name.indexOf("multimatte_lights") != -1){			return ["matte_lights_","Taillights","FogAndSidelights","Headlights"];		}		else if  (theComp.name.indexOf("multimatte_main") != -1){			return ["matte_main_","Paint","G","Windows"];					}		else if  (theComp.name.indexOf("multimatte_parts") != -1){			return ["matte_parts_","PlasticAndRubber","MetalAndBacking","Chrome"];					}		else if  (theComp.name.indexOf("multimatte_wheels") != -1){			return ["matte_wheels_","Brakes","Tyre","Alloys"];					}		else {			var newCompName = theComp.name.replace(" source","");			if  ( theComp.name.toLowerCase().indexOf("matte") != -1){				return [newCompName,"_R","_G","_B"];						}			else {				return [newCompName,"_matteR","_matteG","_matteB"];										}		}	}		function SPCreateCarLumaMattesForItems ( selectedItems )	{		var i=0;		var len=selectedItems.length;		try { selectedItems[0]; }		catch(err) { i=1; len++;}		var originalSelection = [];		for ( i ; i<len; i++)		{			var item = selectedItems[i];			originalSelection.push (item);		}		for ( i=0,len=originalSelection.length ; i<len; i++)		{			var item = originalSelection[i];			if (item instanceof CompItem)			{				var channels = SPGetCarMultimatteChannelNames ( item );				SPCreateLumaMattesFromRGB (  item, channels[0] , channels[1] , channels[2] , channels[3] );			}		}			}	function SPOrganiseAndMakeMattesForProEXRFolders ()	{		var scriptName = "Organise And Make Mattes for Pro EXR Folders";								app.beginUndoGroup(scriptName);		var selectedItems = app.project.selection;		var isWorkingInNonLinear = true;		// ---------------------------------------------------------------------		var win = new Window("dialog", "Linear Colour",undefined);  // bounds = [left, top, right, bottom]		this.windowRef = win;		// Add a text question for the contents.		win.textPanel = win.add("statictext", undefined, "Are you working in linear colour space?");		// Add the components, two buttons		win.buttonGroup = win.add("group",undefined,"buttonGroup");		win.buttonGroup.orientation = "row";		win.buttonGroup.yesBtn = win.buttonGroup.add("button", undefined, "YES");		win.buttonGroup.noBtn = win.buttonGroup.add("button", undefined, "NO");		// Register event listeners that define the button behavior		win.buttonGroup.noBtn.onClick = function() {			win.close();		};		win.buttonGroup.yesBtn.onClick = function() {			isWorkingInNonLinear = false;			win.close();		};		// Display the window		win.show();		// ---------------------------------------------------------------------										for (var i=0, len=selectedItems.length; i<len; i++)		{			var selectedItem = selectedItems[i];			if (selectedItem instanceof FolderItem)			{				var items = selectedItem.items;				for (var j=1, jLen=items.length+1; j<jLen; j++)				{					var item = items[j];					if ( item.name.indexOf("source comps") != -1)					{						var exrPreComps = item.items;						if ( isWorkingInNonLinear ){							SPDelineariseFirstLayerInItems( exrPreComps);						}						var newFolders = SPOrganiseVRayRenderElementsInFolder ( item );						var matteFolder = newFolders[0];						SPCreateCarLumaMattesForItems ( matteFolder.items ) 					}				}							}		}			app.endUndoGroup();	}		SPOrganiseAndMakeMattesForProEXRFolders ()}