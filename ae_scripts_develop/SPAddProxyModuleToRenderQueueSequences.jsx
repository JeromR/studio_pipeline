{	function SPAddProxyOutputToModuleRenderQueueSequences()	{		var scriptName = "Add Proxy Module To Render Queue Sequences";		var currentProject = app.project ;		var myQueue = currentProject.renderQueue;				// Check a project is open		if (!currentProject)		{			alert ("A project must be open to use this script.", scriptName);			return;		}			// Check for items in render queue		if (myQueue.numItems < 1)		{			alert("You do not have any items set to render.", scriptName);				return;		}		var queuedRenderItems = 0;				// Cycle through render queue and check if any queued items		for (var i=1,len=myQueue.numItems; i<=len; i++)		{			var RQItem = myQueue.item(i);			// Can only modify queued items			if (RQItem.status == RQItemStatus.QUEUED)			{				queuedRenderItems++;			}		}		if (queuedRenderItems == 0)		{			alert("There are no queued render items. The path is set on queued renders only.", scriptName);			return;		}		// Cycle through render queue		app.beginUndoGroup(scriptName);		for (var i=1,len=myQueue.numItems; i<=len; i++)		{			var RQItem = myQueue.item(i);			// Can only modify queued items			if (RQItem.status == RQItemStatus.QUEUED)			{					RQItem.outputModules.add();				// Create a folder for each file sequence the set the output module to that				var secondLastOMItem = RQItem.outputModules[RQItem.numOutputModules-1];				var lastOMItem = RQItem.outputModules[RQItem.numOutputModules];												var sequenceFileName = secondLastOMItem.file.name.replace( "_%5B#####%5D","") ; // Remove _[#####]				sequenceFileName = sequenceFileName.substr(0, sequenceFileName.lastIndexOf('.')); // Remove Extension								var sequenceFolderPath = new Folder ( secondLastOMItem.file.path + "/proxy/" )				sequenceFolderPath.create();				var sequencePath = new File ( sequenceFolderPath.path + "/proxy/" + secondLastOMItem.file.name );									lastOMItem.file = sequencePath;							}			app.endUndoGroup();		}		}	SPAddProxyOutputToModuleRenderQueueSequences();}